{
  "children": [{
      "selectedResources": {
        "values": [{
          "label": "SampleType",
          "type": "Identifier",
          "original": "SampleType"
        }],
        "type": "ValueListingNode",
        "original": " SampleType "
      },
      "locationSpecification": {
        "text": "test",
        "type": "StringLiteral",
        "original": "\"test\""
      },
      "type": "LinkNode",
      "original": "\nimport { SampleType } from \"test\";"
    },
    {
      "left": {
        "modifier": {
          "label": "const",
          "type": "Identifier",
          "original": "const"
        },
        "id": {
          "label": "test",
          "type": "Identifier",
          "original": "test"
        },
        "type": "VariableDeclarationNode",
        "original": "const test"
      },
      "right": {
        "compositorToken": "+",
        "left": {
          "value": 1,
          "type": "NumericLiteral",
          "original": "1"
        },
        "right": {
          "compositorToken": "*",
          "left": {
            "value": 4,
            "type": "NumericLiteral",
            "original": "4"
          },
          "right": {
            "value": 3,
            "type": "NumericLiteral",
            "original": "3"
          },
          "type": "CompositionNode",
          "original": "4 * 3"
        },
        "type": "CompositionNode",
        "original": "1 + 4 * 3"
      },
      "type": "AssignmentNode",
      "original": "const test = 1 + 4 * 3"
    },
    {
      "id": {
        "label": "print_hello",
        "type": "Identifier",
        "original": "print_hello"
      },
      "parameters": {
        "values": [{
          "label": "hello_text",
          "type": "Identifier",
          "original": "hello_text"
        }],
        "type": "ValueListingNode",
        "original": "hello_text"
      },
      "body": {
        "content": {
          "children": [{
              "subject": {
                "label": "console",
                "type": "Identifier",
                "original": "console"
              },
              "method": {
                "identifier": {
                  "label": "log",
                  "type": "Identifier",
                  "original": "log"
                },
                "parameters": {
                  "values": [{
                    "label": "hello_text",
                    "type": "Identifier",
                    "original": "hello_text"
                  }],
                  "type": "ValueListingNode",
                  "original": "hello_text"
                },
                "type": "FunctionCall",
                "original": "log(hello_text);"
              },
              "type": "PropertyCallNode",
              "original": "console.log(hello_text);"
            },
            {
              "returnValue": {
                "text": "sdfqrwe",
                "type": "StringLiteral",
                "original": "\"sdfqrwe\""
              },
              "type": "ReturnNode",
              "original": "return \"sdfqrwe\""
            }
          ],
          "type": "BlockContent",
          "original": "\nconsole.log(hello_text);\nreturn \"sdfqrwe\"\n"
        },
        "type": "BlockScope",
        "original": "{\nconsole.log(hello_text);\nreturn \"sdfqrwe\"\n}"
      },
      "type": "FunctionDefinition",
      "original": "\nfunction print_hello(hello_text): TestClass {\nconsole.log(hello_text);\nreturn \"sdfqrwe\"\n}"
    },
    {
      "identifier": {
        "label": "print_hello",
        "type": "Identifier",
        "original": "print_hello"
      },
      "parameters": {
        "values": [{
          "text": "hello world from ordo",
          "type": "StringLiteral",
          "original": "'hello world from ordo'"
        }],
        "type": "ValueListingNode",
        "original": "'hello world from ordo'"
      },
      "type": "FunctionCall",
      "original": "print_hello('hello world from ordo');"
    },
    {
      "left": {
        "valuetype": {
          "label": "any",
          "type": "Identifier",
          "original": "any"
        },
        "modifier": {
          "label": "const",
          "type": "Identifier",
          "original": "const"
        },
        "id": {
          "label": "newall",
          "type": "Identifier",
          "original": "newall"
        },
        "type": "VariableDeclarationNode",
        "original": "const newall: any"
      },
      "right": {
        "content": null,
        "type": "BlockScope",
        "original": "{}"
      },
      "type": "AssignmentNode",
      "original": "\nconst newall: any = {}"
    },
    {
      "left": {
        "valuetype": {
          "label": "any",
          "type": "Identifier",
          "original": "any"
        },
        "modifier": {
          "label": "const",
          "type": "Identifier",
          "original": "const"
        },
        "id": {
          "label": "newallss",
          "type": "Identifier",
          "original": "newallss"
        },
        "type": "VariableDeclarationNode",
        "original": "const newallss: any"
      },
      "right": {
        "value": {
          "values": [{
              "value": 1,
              "type": "NumericLiteral",
              "original": "1"
            },
            {
              "value": 2,
              "type": "NumericLiteral",
              "original": "2"
            },
            {
              "label": "newall",
              "type": "Identifier",
              "original": "newall"
            }
          ],
          "type": "ValueListingNode",
          "original": "1, 2, newall"
        },
        "type": "ArrayLiteral",
        "original": "[1, 2, newall]"
      },
      "type": "AssignmentNode",
      "original": "const newallss: any = [1, 2, newall]"
    },
    {
      "condition": {
        "compositorToken": "<",
        "left": {
          "label": "newall",
          "type": "Identifier",
          "original": "newall"
        },
        "right": {
          "value": 40,
          "type": "NumericLiteral",
          "original": "40"
        },
        "type": "CompositionNode",
        "original": "newall < 40"
      },
      "thenBlock": {
        "content": {
          "children": [{
            "identifier": {
              "label": "print_hello",
              "type": "Identifier",
              "original": "print_hello"
            },
            "parameters": {
              "values": [{
                "text": "hello",
                "type": "StringLiteral",
                "original": "'hello'"
              }],
              "type": "ValueListingNode",
              "original": "'hello'"
            },
            "type": "FunctionCall",
            "original": "print_hello('hello');"
          }],
          "type": "BlockContent",
          "original": "\nprint_hello('hello');\n"
        },
        "type": "BlockScope",
        "original": "{\nprint_hello('hello');\n}"
      },
      "type": "IfNode",
      "original": "\nif(newall < 40){\nprint_hello('hello');\n}"
    },
    {
      "thenBlock": {
        "content": {
          "children": [{
            "identifier": {
              "label": "print_hello",
              "type": "Identifier",
              "original": "print_hello"
            },
            "parameters": {
              "values": [{
                "text": "sss",
                "type": "StringLiteral",
                "original": "'sss'"
              }],
              "type": "ValueListingNode",
              "original": "'sss'"
            },
            "type": "FunctionCall",
            "original": "print_hello('sss');"
          }],
          "type": "BlockContent",
          "original": "\nprint_hello('sss');\n"
        },
        "type": "BlockScope",
        "original": "{\nprint_hello('sss');\n}"
      },
      "type": "ElseNode",
      "original": "\nelse {\nprint_hello('sss');\n}"
    },
    {
      "left": {
        "modifier": {
          "label": "const",
          "type": "Identifier",
          "original": "const"
        },
        "id": {
          "label": "test",
          "type": "Identifier",
          "original": "test"
        },
        "type": "VariableDeclarationNode",
        "original": "const test"
      },
      "right": {
        "subject": {
          "label": "newall",
          "type": "Identifier",
          "original": "newall"
        },
        "method": {
          "identifier": {
            "label": "prop",
            "type": "Identifier",
            "original": "prop"
          },
          "type": "FunctionCall",
          "original": "prop();"
        },
        "type": "PropertyCallNode",
        "original": "newall.prop();"
      },
      "type": "AssignmentNode",
      "original": "const test = newall.prop();"
    },
    {
      "initializer": {
        "valuetype": {
          "label": "number = 0",
          "type": "Identifier",
          "original": "number = 0"
        },
        "modifier": {
          "label": "var",
          "type": "Identifier",
          "original": "var"
        },
        "id": {
          "label": "i",
          "type": "Identifier",
          "original": "i"
        },
        "type": "VariableDeclarationNode",
        "original": "var i: number = 0"
      },
      "endCondition": {
        "compositorToken": "<",
        "left": {
          "label": "i",
          "type": "Identifier",
          "original": "i"
        },
        "right": {
          "value": 10,
          "type": "NumericLiteral",
          "original": "10"
        },
        "type": "CompositionNode",
        "original": "i < 10"
      },
      "incrementor": {
        "operationToken": "++",
        "target": {
          "label": "i",
          "type": "Identifier",
          "original": "i"
        },
        "type": "UnaryCompositionNode",
        "original": "i++"
      },
      "body": {
        "content": {
          "children": [{
            "subject": {
              "label": "console",
              "type": "Identifier",
              "original": "console"
            },
            "method": {
              "identifier": {
                "label": "log",
                "type": "Identifier",
                "original": "log"
              },
              "parameters": {
                "values": [{
                  "label": "hello_text",
                  "type": "Identifier",
                  "original": "hello_text"
                }],
                "type": "ValueListingNode",
                "original": "hello_text"
              },
              "type": "FunctionCall",
              "original": "log(hello_text);"
            },
            "type": "PropertyCallNode",
            "original": "console.log(hello_text);"
          }],
          "type": "BlockContent",
          "original": "\nconsole.log(hello_text);\n"
        },
        "type": "BlockScope",
        "original": "{\nconsole.log(hello_text);\n}"
      },
      "type": "ForNode",
      "original": "\nfor(var i: number = 0; i < 10; i++){\nconsole.log(hello_text);\n};"
    }
  ],
  "type": "BlockContent",
  "original": "import { SampleType } from \"test\";\n\nconst test = 1 + 4 * 3\n\nfunction print_hello(hello_text): TestClass {\n    console.log(hello_text);\n  \treturn \"sdfqrwe\"\n}\n\nprint_hello('hello world from ordo');\n\nconst newall: any = {}\n\nconst newallss: any = [1, 2, newall]\n\nif(newall < 40){\n  print_hello('hello');\n}\nelse {\n  print_hello('sss');\n}\n\nconst test = newall.prop();\n\nfor(var i: number = 0; i < 10; i++){\n  console.log(hello_text);\n};"
}